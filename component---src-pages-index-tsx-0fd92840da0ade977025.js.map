{"version":3,"file":"component---src-pages-index-tsx-0fd92840da0ade977025.js","mappings":"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","sources":["webpack://blog.nasustim.com/./src/components/organisms/meta/common-head/index.tsx","webpack://blog.nasustim.com/./src/components/organisms/articleList/index.tsx","webpack://blog.nasustim.com/./src/components/organisms/articleList/index.css.ts","webpack://blog.nasustim.com/./src/pages/index.tsx","webpack://blog.nasustim.com/./src/utils/markdownUtils/index.ts"],"sourcesContent":["import { graphql, useStaticQuery } from \"gatsby\";\nimport type { FC } from \"react\";\n\ntype Props = {\n  title?: string;\n  description?: string;\n  image?: string;\n  siteUrl?: string;\n};\n\nexport const CommonHead: FC<Props> = ({\n  title,\n  description,\n  image,\n  siteUrl,\n}) => {\n  const data = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n          description\n          twitterUsername\n          image\n          siteUrl \n        }\n      }\n    }\n  `);\n  const { twitterUsername } = data.site.siteMetadata;\n\n  const _title = title ?? data.site.siteMetadata.title;\n  const _description = description ?? data.site.siteMetadata.description;\n  const _image = image ?? data.site.siteMetadata.image;\n  const _siteUrl = siteUrl ?? data.site.siteMetadata.siteUrl;\n\n  return (\n    <>\n      <title>{_title}</title>\n      <meta name=\"description\" content={_description} />\n      <link rel=\"canonical\" href={_siteUrl} />\n\n      {/** OpenGraph */}\n      <meta property=\"og:title\" content={_title} />\n      <meta property=\"og:description\" content={_description} />\n      <meta property=\"og:image\" content={_image} />\n      <meta property=\"og:url\" content={_siteUrl} />\n      <meta\n        property=\"og:type\"\n        content={\n          // todo: Change to more surely process\n          _siteUrl.match(\"entry\") ? \"article\" : \"website\"\n        }\n      />\n\n      {/** X (former Twitter) */}\n      <meta property=\"twitter:card\" content=\"summary\" />\n      <meta property=\"twitter:url\" content={_siteUrl} />\n      <meta property=\"twitter:title\" content={_title} />\n      <meta property=\"twitter:image\" content={_image} />\n      <meta property=\"twitter:description\" content={_description} />\n      <meta property=\"twitter:creator\" content={twitterUsername} />\n    </>\n  );\n};\n","import { Link } from \"@/components/atoms/link\";\nimport { SITE_ORIGIN } from \"@/config\";\nimport { Fragment, useMemo, type FC } from \"react\";\nimport { h2Style, listItemStyle, pStyle } from \"./index.css\";\nimport { toPlainText } from \"@/utils/markdownUtils\";\n\ntype ListItem = {\n  date: string;\n  slug: string;\n  title: string;\n  body: string;\n};\n\ntype Props = {\n  list: Array<ListItem>;\n};\n\nexport const ArticleList: FC<Props> = ({ list }) => {\n  return (\n    <div>\n      <ul>\n        {list.map((v) => (\n          <Fragment key={`article-list-${v.slug}`}>\n            <Item {...v} />\n          </Fragment>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nconst Item: FC<ListItem> = (v) => {\n  const bodyText = useMemo(() => {\n    let result = toPlainText(v.body);\n    if (result.length > 120) {\n      result = `${result.slice(0, 120)}...`;\n    }\n    return result;\n  }, [v.body]);\n\n  return (\n    <Fragment>\n      <li className={listItemStyle}>\n        <Link to={new URL(`/entry/${v.slug}`, SITE_ORIGIN)} noStyle>\n          <small>{v.date}</small>\n          <h2 className={h2Style}>{v.title}</h2>\n          <p className={pStyle}>{bodyText}</p>\n        </Link>\n      </li>\n    </Fragment>\n  );\n};\n","import \"src/components/organisms/articleList/index.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/components/organisms/articleList/index.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xYjMyc2tiMCB7CiAgbWFyZ2luOiA0NnB4IDAgMCAwOwp9Ci5fMWIzMnNrYjEgewogIGZvbnQtc2l6ZTogMjRweDsKICBmb250LXdlaWdodDogNDAwOwp9Ci5fMWIzMnNrYjIgewogIGZvbnQtc2l6ZTogMTRweDsKICBmb250LXdlaWdodDogNDAwOwp9\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nexport var h2Style = '_1b32skb1';\nexport var listItemStyle = '_1b32skb0';\nexport var pStyle = '_1b32skb2';","import { graphql, type HeadFC, type PageProps } from \"gatsby\";\nimport { Template } from \"@/components/templates/\";\nimport { ArticleList } from \"@/components/organisms/articleList\";\nimport { CommonHead } from \"@/components/organisms/meta/common-head\";\n\nconst IndexPage: React.FC<PageProps<Queries.IndexPageQuery>> = ({\n  data,\n  location,\n}) => {\n  const list = data.allMarkdownRemark.edges.map((v) => {\n    const frontmatter = v?.node?.frontmatter;\n    const html = v?.node?.html;\n\n    return {\n      title: frontmatter?.title ?? \"\",\n      date: frontmatter?.date ?? \"\",\n      slug: frontmatter?.slug ?? \"\",\n      body: html ?? \"\",\n    };\n  });\n\n  return (\n    <Template pathname={location.pathname}>\n      <main>\n        <ArticleList list={list} />\n      </main>\n    </Template>\n  );\n};\n\nexport const pageQuery = graphql`\n  query IndexPage {\n    allMarkdownRemark(\n      sort: { order: DESC, fields: frontmatter___date }\n      filter: { frontmatter: { draft: { eq: false } } }\n    ) {\n      edges {\n        node {\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            slug\n            title\n            draft\n          }\n          html\n        }\n      }\n    }\n  }\n`;\n\nexport default IndexPage;\n\nexport const Head: HeadFC = () => {\n  return <CommonHead />;\n};\n","export const toPlainText = (markdown: string): string =>\n  markdown.replace(/<[^>]*>?/gm, \"\");\n"],"names":["CommonHead","_ref","title","description","image","siteUrl","data","useStaticQuery","twitterUsername","site","siteMetadata","_title","_description","_image","_siteUrl","_jsxs","_Fragment","children","_jsx","name","content","rel","href","property","match","ArticleList","list","map","v","Fragment","Item","slug","bodyText","useMemo","result","toPlainText","body","length","slice","className","Link","to","URL","SITE_ORIGIN","noStyle","date","location","allMarkdownRemark","edges","_v$node","_v$node2","_frontmatter$title","_frontmatter$date","_frontmatter$slug","frontmatter","node","html","Template","pathname","Head","markdown","replace"],"sourceRoot":""}