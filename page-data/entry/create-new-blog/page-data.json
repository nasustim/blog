{"componentChunkName":"component---src-pages-entry-markdown-remark-frontmatter-slug-tsx","path":"/entry/create-new-blog/","result":{"data":{"markdownRemark":{"rawMarkdownBody":"\nあなたが今開いてるこのブログを作成した。\n\n新年の何かやりたい勢いにまかせて、とにかく早くブログを用意したかったので、使い慣れた[GitHub Pages](https://docs.github.com/ja/pages) + 日本語ドキュメントも多い[Hugo](https://gohugo.io/)でクイックスタートしつつ、継続的にデプロイできる最低限の足回りの整備を意識しました。\n\nリポジトリはこちら  \nhttps://github.com/nasustim/blog.nasustim.com\n\n---\n\n## Hugo のセットアップ\n\nHugo は Homebrew などのパッケージ管理ツールでもインストールできるが、自分は普段使いの macOS の他に windows(WSL)を利用することもあるので、プラットフォーム間での執筆環境の可搬性を確保するために Docker で利用することにした。  \n[Renovate を導入する](#renovate-を導入する)でも説明するが、ベースイメージを Dockerfile の`FROM`句で指定しておくことで、Renovate でのバージョン管理対象となる。\n\n<code>\n# Dockerfile\nFROM klakegg/hugo:0.107.0-alpine\n\nWORKDIR /work\n\n</code>\n\n<code>\n# hugo\n\n#!/bin/bash\n\nIMAGE_NAME=\"blog\"\n\nimage_builded=$(docker image ls | grep \"$IMAGE_NAME\")\nif[-z \"$image_builded\"]; then\necho \"image building...\"\ndocker build -t \"$IMAGE_NAME\" .\nfi\n\ndocker run --rm -v $(pwd):/work -it -p 1313:1313 \"$IMAGE_NAME\" $\\*\n\n</code>\n\n以下のコマンドでブログのスケルトンを作成\n\n<code>\n$ chmod 777 hugo\n$ ./hugo new site --force ./\n</code>\n\n`config.toml` が作成されるので、自分のブログ用の設定に書き換える\n\n<code>\n# config.toml\n\nbaseURL = \"https://blog.nasustim.com/\"\nlanguageCode = \"ja-jp\"\ntitle = \"nasustim's weblog\"\n\n</code>\n\n### テーマをインストールする\n\nHugo のデザインテーマは`themes/`直下にテーマのリポジトリをダウンロードすることでインストールできる。\nhttps://themes.gohugo.io に主要なテーマが一覧されている。[paper](https://themes.gohugo.io/themes/hugo-paper/)のシンプルなスタイルに惹かれたのでこれをインストールする。\n\n<code>\n$ git submodule add https://github.com/nanxiaobei/hugo-paper themes/paper\n$ echo \"theme = \\\"paper\\\"\" >> config.toml\n</code>\n\n### contentDir を設定\n\n記事を置くディレクトリを設定する\n\n<code>\n$ echo \"contentDir = \\\"articles/\\\"\" >> config.toml\n</code>\n\n## GitHub リポジトリをセットアップする\n\n### デプロイスクリプトの作成\n\n[Host on GitHub | Hugo](https://gohugo.io/hosting-and-deployment/hosting-on-github/#build-hugo-with-github-action) に GitHub Actions で使えるデプロイスクリプトがあるのでこれを利用する。\n上記ページのコードスニペットを`.github/workflows/`以下に YAML ファイルとして保存してセットアップ完了。`main`ブランチにコードが push されるとビルドが実行され、その出力結果が`gh-pages`ブランチに commit される。\n上記デプロイスクリプトは `main`ブランチ以外ではビルドのみ実行されるため、記事のテストとしても活用できる。\n\n### Renovate を導入する\n\nhttps://github.com/apps/renovate より。\nこのリポジトリの依存パッケージのアップデートを自動で管理してくれる。\n\n[Hugo のセットアップ](#hugo-のセットアップ)にて Hugo のベースイメージを Dockerfile の`FROM`句で指定することでこちらも管理対象となる。\n\nまた、submodule でインストールした Hugo テーマも`renovate.json`に以下の設定を追加するとバージョン管理の対象となる。\nhttps://docs.renovatebot.com/modules/manager/git-submodules/\n\n`renovate.json`\n\n<code>\n{\n  ..., // 既存設定\n  \"git-submodules\": {\n    \"enabled\": true\n  }\n}\n</code>\n","frontmatter":{"date":"January 10, 2023","slug":"create-new-blog","title":"Hugoで新しいブログを作成した","draft":true}},"site":{"siteMetadata":{"title":"NASUSTIM","description":"a weblog by @nasustim (Mitsuhiro Hibino)","siteUrl":"https://blog.nasustim.com"}}},"pageContext":{"id":"00670007-9bc8-5ff5-adc8-7dbb59257731","frontmatter__slug":"create-new-blog","__params":{"frontmatter__slug":"create-new-blog"}}},"staticQueryHashes":["1865044719"],"slicesMap":{}}