{"componentChunkName":"component---src-pages-entry-markdown-remark-frontmatter-slug-tsx","path":"/entry/create-new-blog/","result":{"data":{"markdownRemark":{"html":"<p>あなたが今開いてるこのブログを作成した。</p>\n<p>新年の何かやりたい勢いにまかせて、とにかく早くブログを用意したかったので、使い慣れた<a href=\"https://docs.github.com/ja/pages\">GitHub Pages</a> + 日本語ドキュメントも多い<a href=\"https://gohugo.io/\">Hugo</a>でクイックスタートしつつ、継続的にデプロイできる最低限の足回りの整備を意識しました。</p>\n<p>リポジトリはこちら<br>\n<a href=\"https://github.com/nasustim/blog.nasustim.com\">https://github.com/nasustim/blog.nasustim.com</a></p>\n<hr>\n<h2>Hugo のセットアップ</h2>\n<p>Hugo は Homebrew などのパッケージ管理ツールでもインストールできるが、自分は普段使いの macOS の他に windows(WSL)を利用することもあるので、プラットフォーム間での執筆環境の可搬性を確保するために Docker で利用することにした。<br>\n<a href=\"#renovate-%E3%82%92%E5%B0%8E%E5%85%A5%E3%81%99%E3%82%8B\">Renovate を導入する</a>でも説明するが、ベースイメージを Dockerfile の<code>FROM</code>句で指定しておくことで、Renovate でのバージョン管理対象となる。</p>\n<code>\n# Dockerfile\nFROM klakegg/hugo:0.107.0-alpine\n<p>WORKDIR /work</p>\n</code>\n<code>\n# hugo\n<p>#!/bin/bash</p>\n<p>IMAGE_NAME=\"blog\"</p>\n<p>image_builded=$(docker image ls | grep \"$IMAGE_NAME\")\nif [ -z \"$image_builded\" ]; then\necho \"image building...\"\ndocker build -t \"$IMAGE_NAME\" .\nfi</p>\n<p>docker run --rm -v $(pwd):/work -it -p 1313:1313 \"$IMAGE_NAME\" $*</p>\n</code>\n<p>以下のコマンドでブログのスケルトンを作成</p>\n<code>\n$ chmod 777 hugo\n$ ./hugo new site --force ./\n</code>\n<p><code>config.toml</code> が作成されるので、自分のブログ用の設定に書き換える</p>\n<code>\n# config.toml\n<p>baseURL = \"<a href=\"https://blog.nasustim.com/\">https://blog.nasustim.com/</a>\"\nlanguageCode = \"ja-jp\"\ntitle = \"nasustim's weblog\"</p>\n</code>\n<h3>テーマをインストールする</h3>\n<p>Hugo のデザインテーマは<code>themes/</code>直下にテーマのリポジトリをダウンロードすることでインストールできる。\n<a href=\"https://themes.gohugo.io\">https://themes.gohugo.io</a> に主要なテーマが一覧されている。<a href=\"https://themes.gohugo.io/themes/hugo-paper/\">paper</a>のシンプルなスタイルに惹かれたのでこれをインストールする。</p>\n<code>\n$ git submodule add https://github.com/nanxiaobei/hugo-paper themes/paper\n$ echo \"theme = \\\"paper\\\"\" >> config.toml\n</code>\n<h3>contentDir を設定</h3>\n<p>記事を置くディレクトリを設定する</p>\n<code>\n$ echo \"contentDir = \\\"articles/\\\"\" >> config.toml\n</code>\n<h2>GitHub リポジトリをセットアップする</h2>\n<h3>デプロイスクリプトの作成</h3>\n<p><a href=\"https://gohugo.io/hosting-and-deployment/hosting-on-github/#build-hugo-with-github-action\">Host on GitHub | Hugo</a> に GitHub Actions で使えるデプロイスクリプトがあるのでこれを利用する。\n上記ページのコードスニペットを<code>.github/workflows/</code>以下に YAML ファイルとして保存してセットアップ完了。<code>main</code>ブランチにコードが push されるとビルドが実行され、その出力結果が<code>gh-pages</code>ブランチに commit される。\n上記デプロイスクリプトは <code>main</code>ブランチ以外ではビルドのみ実行されるため、記事のテストとしても活用できる。</p>\n<h3>Renovate を導入する</h3>\n<p><a href=\"https://github.com/apps/renovate\">https://github.com/apps/renovate</a> より。\nこのリポジトリの依存パッケージのアップデートを自動で管理してくれる。</p>\n<p><a href=\"#hugo-%E3%81%AE%E3%82%BB%E3%83%83%E3%83%88%E3%82%A2%E3%83%83%E3%83%97\">Hugo のセットアップ</a>にて Hugo のベースイメージを Dockerfile の<code>FROM</code>句で指定することでこちらも管理対象となる。</p>\n<p>また、submodule でインストールした Hugo テーマも<code>renovate.json</code>に以下の設定を追加するとバージョン管理の対象となる。\n<a href=\"https://docs.renovatebot.com/modules/manager/git-submodules/\">https://docs.renovatebot.com/modules/manager/git-submodules/</a></p>\n<p><code>renovate.json</code></p>\n<code>\n{\n  ..., // 既存設定\n  \"git-submodules\": {\n    \"enabled\": true\n  }\n}\n</code>","frontmatter":{"date":"January 10, 2023","slug":"/create-new-blog","title":"Hugoで新しいブログを作成した"}}},"pageContext":{"id":"00670007-9bc8-5ff5-adc8-7dbb59257731","frontmatter__slug":"/create-new-blog","__params":{"frontmatter__slug":"create-new-blog"}}},"staticQueryHashes":[],"slicesMap":{}}