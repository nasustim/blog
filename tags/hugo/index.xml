<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hugo on nasustim's weblog</title><link>https://blog.nasustim.com/tags/hugo/</link><description>Recent content in Hugo on nasustim's weblog</description><generator>Hugo</generator><language>ja-jp</language><lastBuildDate>Tue, 10 Jan 2023 14:40:16 +0000</lastBuildDate><atom:link href="https://blog.nasustim.com/tags/hugo/index.xml" rel="self" type="application/rss+xml"/><item><title>Hugoで新しいブログを作成した</title><link>https://blog.nasustim.com/entry/create-new-blog/</link><pubDate>Tue, 10 Jan 2023 14:40:16 +0000</pubDate><guid>https://blog.nasustim.com/entry/create-new-blog/</guid><description>あなたが今開いてるこのブログを作成した。
新年の何かやりたい勢いにまかせて、とにかく早くブログを用意したかったので、使い慣れたGitHub Pages + 日本語ドキュメントも多いHugoでクイックスタートしつつ、継続的にデプロイできる最低限の足回りの整備を意識しました。
リポジトリはこちら
https://github.com/nasustim/blog.nasustim.com
Hugo のセットアップ Hugo は Homebrew などのパッケージ管理ツールでもインストールできるが、自分は普段使いのmacOSの他にwindows(WSL)を利用することもあるので、プラットフォーム間での執筆環境の可搬性を確保するために Docker で利用することにした。
Renovate を導入するでも説明するが、ベースイメージを Dockerfile のFROM句で指定しておくことで、Renovate でのバージョン管理対象となる。
# Dockerfile FROM klakegg/hugo:0.107.0-alpine WORKDIR /work # hugo #!/bin/bash IMAGE_NAME=&amp;#34;blog&amp;#34; image_builded=$(docker image ls | grep &amp;#34;$IMAGE_NAME&amp;#34;) if [ -z &amp;#34;$image_builded&amp;#34; ]; then echo &amp;#34;image building...&amp;#34; docker build -t &amp;#34;$IMAGE_NAME&amp;#34; . fi docker run --rm -v $(pwd):/work -it -p 1313:1313 &amp;#34;$IMAGE_NAME&amp;#34; $* 以下のコマンドでブログのスケルトンを作成
$ chmod 777 hugo $ ./hugo new site --force .</description></item></channel></rss>